{"name": "test_fill_evaluation_without_ratings", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"checked\">...</span> is not clickable at point (809, 9). Other element would receive the click: <div class=\"page-header-inner flex h-full items-center \">...</div>\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x010D1673+52979]\n\t(No symbol) [0x01057961]\n\t(No symbol) [0x00F3DD3D]\n\t(No symbol) [0x00F7B79B]\n\t(No symbol) [0x00F79EB7]\n\t(No symbol) [0x00F77F1B]\n\t(No symbol) [0x00F770BD]\n\t(No symbol) [0x00F6E010]\n\t(No symbol) [0x00F944EC]\n\t(No symbol) [0x00F6DA4E]\n\t(No symbol) [0x00F94784]\n\t(No symbol) [0x00FAB3FE]\n\t(No symbol) [0x00F94286]\n\t(No symbol) [0x00F6C063]\n\t(No symbol) [0x00F6CECD]\n\tGetHandleVerifier [0x013E8D83+3294723]\n\tGetHandleVerifier [0x01426CC2+3548482]\n\tGetHandleVerifier [0x01421C9C+3527964]\n\tGetHandleVerifier [0x0116870E+671630]\n\t(No symbol) [0x01061EB4]\n\t(No symbol) [0x0105D808]\n\t(No symbol) [0x0105D92D]\n\t(No symbol) [0x0104F7E0]\n\tBaseThreadInitThunk [0x75F4FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B87C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B87C3E+238]", "trace": "employee_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"364bbc1234116907c67c67f528c17e67\")>\nconfig = {'baseUrl': 'http://172.22.1.141:8089/', 'employee': {'browserType': 'chrome', 'invalid_credentials': {'password': 'hg...d': 'hgukk', 'username': 'aassi'}, 'valid_manager_credentials': {'password': '45622', 'username': 'test-supervisor2'}}}\nevaluation_page = <src.pages.EvaluationPage.EmployeeEvaluationPage object at 0x0000025348C63980>\n\n    @pytest.mark.order(8)\n    def test_fill_evaluation_without_ratings(employee_browser, config, evaluation_page):\n        evaluation_page.wait_for_criteria_table_presence()\n>       evaluation_page.clear_rating()\n\ntests_\\test_employee\\test_EmployeeEvaluation.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\EvaluationPage.py:42: in clear_rating\n    checkbox.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025348C27B90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B87C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B87C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"checked\">...</span> is not clickable at point (809, 9). Other element would receive the click: <div class=\"page-header-inner flex h-full items-center \">...</div>\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010D1673+52979]\nE       \t(No symbol) [0x01057961]\nE       \t(No symbol) [0x00F3DD3D]\nE       \t(No symbol) [0x00F7B79B]\nE       \t(No symbol) [0x00F79EB7]\nE       \t(No symbol) [0x00F77F1B]\nE       \t(No symbol) [0x00F770BD]\nE       \t(No symbol) [0x00F6E010]\nE       \t(No symbol) [0x00F944EC]\nE       \t(No symbol) [0x00F6DA4E]\nE       \t(No symbol) [0x00F94784]\nE       \t(No symbol) [0x00FAB3FE]\nE       \t(No symbol) [0x00F94286]\nE       \t(No symbol) [0x00F6C063]\nE       \t(No symbol) [0x00F6CECD]\nE       \tGetHandleVerifier [0x013E8D83+3294723]\nE       \tGetHandleVerifier [0x01426CC2+3548482]\nE       \tGetHandleVerifier [0x01421C9C+3527964]\nE       \tGetHandleVerifier [0x0116870E+671630]\nE       \t(No symbol) [0x01061EB4]\nE       \t(No symbol) [0x0105D808]\nE       \t(No symbol) [0x0105D92D]\nE       \t(No symbol) [0x0104F7E0]\nE       \tBaseThreadInitThunk [0x75F4FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B87C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B87C3E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1707246744254, "stop": 1707246745604, "uuid": "4981f374-901c-4934-b118-e731c2f9f2ce", "historyId": "2fd30d7319911133845f2d3cba848ee5", "testCaseId": "2fd30d7319911133845f2d3cba848ee5", "fullName": "tests_.test_employee.test_EmployeeEvaluation#test_fill_evaluation_without_ratings", "labels": [{"name": "tag", "value": "order(8)"}, {"name": "parentSuite", "value": "tests_.test_employee"}, {"name": "suite", "value": "test_EmployeeEvaluation"}, {"name": "host", "value": "Asal-AseelAssi"}, {"name": "thread", "value": "14404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_.test_employee.test_EmployeeEvaluation"}]}
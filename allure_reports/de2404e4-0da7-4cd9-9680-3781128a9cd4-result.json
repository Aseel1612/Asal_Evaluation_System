{"name": "test_responsive_evaluation_layout[Desktop]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00A91673+52979]\n\t(No symbol) [0x00A17961]\n\t(No symbol) [0x008FDC00]\n\t(No symbol) [0x00936F63]\n\t(No symbol) [0x0092E010]\n\t(No symbol) [0x009544EC]\n\t(No symbol) [0x0092DA4E]\n\t(No symbol) [0x00954784]\n\t(No symbol) [0x0096B3FE]\n\t(No symbol) [0x00954286]\n\t(No symbol) [0x0092C063]\n\t(No symbol) [0x0092CECD]\n\tGetHandleVerifier [0x00DA8D83+3294723]\n\tGetHandleVerifier [0x00DE6CC2+3548482]\n\tGetHandleVerifier [0x00DE1C9C+3527964]\n\tGetHandleVerifier [0x00B2870E+671630]\n\t(No symbol) [0x00A21EB4]\n\t(No symbol) [0x00A1D808]\n\t(No symbol) [0x00A1D92D]\n\t(No symbol) [0x00A0F7E0]\n\tBaseThreadInitThunk [0x76F5FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7C3E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e41b0f01ec8adef68942ca9e7841a789\")>\nconfig = {'baseUrl': 'http://172.22.1.141:8089/', 'browserType': 'chrome', 'invalid_credentials': {'password': 'hgukk', 'username': 'aaaaa'}, 'valid_credentials': {'password': '45622', 'username': 'test-employee3'}}\nscreen_sizes = {'Desktop': {'height': 768, 'width': 1366}, 'Mobile': {'height': 640, 'width': 360}, 'Tablet': {'height': 1024, 'width': 768}}\nevaluation_page = <src.pages.EmployeeEvaluationPage.EmployeeEvaluationPage object at 0x00000272AB21AEA0>, device = 'Desktop'\n\n    @pytest.mark.order(5)\n    @pytest.mark.parametrize(\"device\", [\"Mobile\", \"Tablet\", \"Desktop\"])\n    def test_responsive_evaluation_layout(browser, config, screen_sizes, evaluation_page, device):\n        # Set the browser window size based on the device\n        home_page = HomePage(browser)\n>       home_page.go_to_evaluation_page()\n\ntest_employee\\test_EmployeeEvaluation.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\HomePage.py:12: in go_to_evaluation_page\n    self.click(self.MY_EVALUATION_LINK)\nsrc\\pages\\BasePage.py:28: in click\n    element.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000272AAD88CE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A91673+52979]\nE       \t(No symbol) [0x00A17961]\nE       \t(No symbol) [0x008FDC00]\nE       \t(No symbol) [0x00936F63]\nE       \t(No symbol) [0x0092E010]\nE       \t(No symbol) [0x009544EC]\nE       \t(No symbol) [0x0092DA4E]\nE       \t(No symbol) [0x00954784]\nE       \t(No symbol) [0x0096B3FE]\nE       \t(No symbol) [0x00954286]\nE       \t(No symbol) [0x0092C063]\nE       \t(No symbol) [0x0092CECD]\nE       \tGetHandleVerifier [0x00DA8D83+3294723]\nE       \tGetHandleVerifier [0x00DE6CC2+3548482]\nE       \tGetHandleVerifier [0x00DE1C9C+3527964]\nE       \tGetHandleVerifier [0x00B2870E+671630]\nE       \t(No symbol) [0x00A21EB4]\nE       \t(No symbol) [0x00A1D808]\nE       \t(No symbol) [0x00A1D92D]\nE       \t(No symbol) [0x00A0F7E0]\nE       \tBaseThreadInitThunk [0x76F5FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AB7C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AB7C3E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "parameters": [{"name": "device", "value": "'Desktop'"}], "start": 1706969618438, "stop": 1706969618459, "uuid": "ec3dfeaa-3eec-4511-990e-0686a99f6e9a", "historyId": "7048d7ee7394163f6ffb36ed9772e42d", "testCaseId": "a3b5ffec1647611d62251b5832e465b5", "fullName": "test_employee.test_EmployeeEvaluation#test_responsive_evaluation_layout", "labels": [{"name": "tag", "value": "order(5)"}, {"name": "parentSuite", "value": "test_employee"}, {"name": "suite", "value": "test_EmployeeEvaluation"}, {"name": "host", "value": "Asal-AseelAssi"}, {"name": "thread", "value": "6416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_employee.test_EmployeeEvaluation"}]}